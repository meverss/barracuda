.\"Barracuda theme documentation
.TH "Help" "1" "May 31, 2021" "1.7.0" "Barracuda theme for the fish shell"
.SH DESCRIPTION

/fish/man/man1 ÓÉÜ

This theme is a fork of \fBoh-my-fish/theme-budspencer\fP (\fIhttps://github.com/oh-my-fish/theme-budspencer\fP), which means it keeps almost all it's awesome features.

Some fancy visual changes has been made taking advantage of \fBPowerline Symbols\fP.

.SH SYNOPSIS

Barracuda is a nice-looking theme which makes fish even more powerful. It's equipped with a
lot of nice functions and key bindings to speed up your workflow

.SH COMPLEMENTARY APPS (Recommended):
.IP \(bu 2
\fITermux:API plug-in\fP (Both \fBTermux\fP and \fBTermux:API plug-in\fP should be downloaded from \fBF-Droid\fP(\fIhttps://f-droid.org\fP) as both apps most have the same PGP signature)
.IP \(bu 2
\fItermux-api\fP

apt install termux-api
.IP \(bu 2
\fInodejs\fP

apt install nodejs

.IP \(bu 2
\fIpv\fP

apt install pv

.SH CONFIGURATION

.SS General configuration:

The theme behaves similar to vim's airline/powerline plugins. Thus, it needs a powerline font.
It's also crucial to have vi mode enabled. Thus, before enabling the theme execute:

set -U fish_key_bindings fish_vi_key_bindings

.SS Languages:

This theme can be shown in different languages (three languages so far and still working on transkations): Spanish, English and French.

There are two ways to change interface language: one is by using the function `termux-language` followed by the language identifier, and the other one, just typing the language name on the prompt.

Supported languages and their identifiers are:
.IP \(bu 2
\fIsp\fP for spanish
.IP \(bu 2
\fIen\fP for english
.IP \(bu 2
\fIfr\fP for french

e.g To set french language:

termux-language fr

Or:

french

.SS Colors:

Two color schemes for bright and dark environments are predefined. You can enable them with \fBday\fP and \fBnight\fP, respectively.

.SS Command history:
Commands that shouldn't appear in the command history are defined by a universal list \fI$barracuda_nocmdhist\fP. Default:

set -U barracuda_nocmdhist c d ll ls m s

.SS Disable/reenable greeting:

\fBDisable:\fP

set -U barracuda_nogreeting


\fBReenable:\fP

set -e barracuda_nogreeting


.SS Show Node version:

To show your current node version, do following in your Fish configs

\fBEnable:\fP

set -g barracuda_alt_environment "node -v"


\fBDisable:\fP

set -U barracuda_alt_environment


.SS Outer prompt segments:
.IP \(bu 4
Vi mode is indicated by color of outer segments, cursor color also changes if terminal supports it:
.RS 4
.IP \(bu 4
\fIgreen\fP: \fBNORMAL\fP mode
.IP \(bu 4
\fIyellow\fP: \fBINSERT\fP mode
.IP \(bu 4
\fIblue\fP: \fBVISUAL\fP mode
.RE
.SS Left prompt segments:
.IP \(bu 4
Working directory
.IP \(bu 4
Prompt
.RS 4
.IP \(bu 4
Prompt line number
.IP \(bu 4
Language
.IP \(bu 4
Git repository information
.IP \(bu 4
Status symbols
.RS 4
.IP \(bu 4
‚úª: keep track of this shell session, can be toggled with `#` to show the number of the session within the sessions list
.IP \(bu 4
‚≠ê: present working directory is in bookmark list, can be toggled with `#` to show the number of the bookmark
.IP \(bu 4
V: vi is parent process
.IP \(bu 4
R: [ranger][ranger] is parent process
.IP \(bu 4
‚¨ú: there are background jobs, can be toggled with `#` to show the amount of background jobs
.IP \(bu 4
üîí: no write permissions in present working directory
.IP \(bu 4
‚öî: there are tasks scheduled for this week, can be toggled with `#` to show the amount of weekly tasks
.IP \(bu 4
‚öë: there are appointments for today, can be toggled with `#` to show the amount of appointments
.IP \(bu 4
‚úî: last command succeeded, can be toggled with `#` to show the status value
.IP \(bu 4
 ‚úò: last command failed, can be toggled with `#` to show the status value
.IP \(bu 4
‚ö°: superuser indicator
.RE
.IP \(bu 4
Active Python [virtual environment](https://virtualenv.pypa.io/en/latest/). Requires [Virtual Fish](https://github.com/adambrenecki/virtualfish/)

.SH Right prompt segments:

- Shows OS and other system info.

## Quickly navigate in history of working directories

The function `d` drops down a menu showing the history as enumerated list. Unlike
fish's builtin `dirh`, `d` does not show any duplicates. Enter a number to jump
to a directory within the list.

The following shortcuts need vi-mode:
- Press `H` in NORMAL mode to change present working directory to previous
  working directory in history.
- Press `L` in NORMAL mode to change present working directory to next working
  directory in history.

## Quickly navigate in command history

The function `c` drops down a menu showing the command history as enumerated list similarly to
the `d` function. Selections are also pasted into the X clipboard. It's possible
to load a command of a former prompt by giving the prompt line number as
argument.

## Bookmarks

A bookmark can be created with `mark`. It can be removed with `unmark`. 

`unmark` can take an argument to remove a specific bookmark in the bookmark list. 
Simply add the number of the bookmark you would like to remove as the argument.

Bookmarks are universal and thus persistant.
A new shell automatically changes working directory on startup to newest bookmark.
`m` is a function that drops down a menu showing the bookmarks as enumerated list
equivalently to `d`.

The following shortcuts need vi mode:
- Create a bookmark for present working directory with `m` in NORMAL mode.
- Remove a bookmark for present working directory with `M` in NORMAL mode.

By default the shell will change to the directory of the latest bookmark on a new session. 
This can be disabled by adding the following line:

```
set -U barracuda_no_cd_bookmark
```

## Edit commandline with your favorite editor

The function `edit-commandline` let you edit the commandline with your editor.
It makes the commandline as powerful as your editor. If `$EDITOR` is not set,
vi is used.

The following shortcut needs vi mode:
- Type `.` in NORMAL mode to edit commandline in editor.

## Sessions

Shell session can be stored with `s <session name>`. If a session with `session
name` already exists, the session with this name will be attached. If a session with
`session name` is already active within another terminal, this terminal will be
focussed.

A list of available sessions can be shown with `s`.

A session can be erased with `s -e <session name>`.

Type `s -d` to detach current session.

## Set window title

Just type `wt <title>`.

## Ring the bell in order to set the urgency hint flag

If you have configured your terminal application to use the visual bell, your
window manager will tell you when a job running in your shell has finished. You
don't need to check manually whether it's done.

If you have still activated the acoustic bell, you probably hate that feature.
Switch it off in that case:
```
set -U barracuda_nobell
```
## Termux Backup

With this function it's possible to perform a full backup of system and user's files.

To create a new backup type:
```
termux-backup -c <or> --create [file_name]
```

To list existing backups use:
```
termux-backup -l <or> --list
```
![screenshot](images/screenshot_l.jpg)

To delete an existing backup:
```
termux-backup -d <or> --delete
```
![screenshot](images/screenshot_d.jpg)
To show help:
```
termux-backup -h <or> --help
```

Unfortunately this function can only perform backups. Restores have to be decompressed and copied manually.

.SH TODO
.IP \(bu
Add option to restore backups
.IP \(bu 2
Add support for more languages


